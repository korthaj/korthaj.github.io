<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms explained on Algorithms to Go</title>
    <link>https://yourbasic.org/algorithms/</link>
    <description>Recent content in Algorithms explained on Algorithms to Go</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://yourbasic.org/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithms: What’s the problem?</title>
      <link>https://yourbasic.org/algorithms/algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/algorithms/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;A good programmer describes algo&amp;shy;rithms in a form&#xA;that can be&amp;nbsp;effi&amp;shy;ciently exe&amp;shy;cuted by&amp;nbsp;ma&amp;shy;chines&#xA;and easily under&amp;shy;stood by&amp;nbsp;humans.&lt;/p&gt;&#xA;&lt;!-- CC0: https://pixabay.com/en/maze-labyrinth-solution-lost-1804499/ --&gt;&#xA;&lt;div&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/maze.jpg&#34;&gt;&lt;/div&gt;&#xA;&lt;p&gt;Algorithms and programs are pretty much the same thing –&#xA;the main difference is that we can talk about algorithms without relying&#xA;on a programming language.&#xA;An algorithm invented today will be equally as useful when&#xA;the last Java programmer has logged out.&#xA;Here is an attempt at a formal definition.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Amortized time complexity</title>
      <link>https://yourbasic.org/algorithms/amortized-time-complexity-analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/amortized-time-complexity-analysis/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;Amortized analysis is used for algo&amp;shy;rithms that have &lt;b&gt;expensive opera&amp;shy;tions&lt;/b&gt; that happen only&amp;nbsp;&lt;b&gt;rarely&lt;/b&gt;.&lt;/p&gt;&#xA;&lt;!-- CC0: https://www.pexels.com/photo/money-pink-coins-pig-9660/ --&gt;&#xA;&lt;div&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/pink-coins.jpg&#34;&gt;&lt;/div&gt;&#xA;&lt;p&gt;Amortized complexity analysis is most commonly used with data structures&#xA;that have state that persists between operations.&#xA;The basic idea is that an expensive operation can alter the state so that&#xA;the worst case cannot occur again for a long time, thus amortizing its cost.&lt;/p&gt;&#xA;&lt;blockquote class=&#34;math&#34;&gt;&#xA;Let T&lt;sub&gt;1&lt;/sub&gt;, T&lt;sub&gt;2&lt;/sub&gt;,&amp;nbsp;…, T&lt;sub&gt;k&lt;/sub&gt; be the complexities&#xA;of a sequence of operations on a data structure. The &lt;b&gt;amortized complexity&lt;/b&gt;&#xA;of a single operation in this sequence is&#xA;(T&lt;sub&gt;1&lt;/sub&gt;&amp;nbsp;+&amp;nbsp;T&lt;sub&gt;2&lt;/sub&gt;&amp;nbsp;+&amp;nbsp;…+&amp;nbsp;T&lt;sub&gt;k&lt;/sub&gt;)&amp;nbsp;/&amp;nbsp;k.&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;example-a-dynamic-array&#34;&gt;Example: a dynamic array&lt;/h2&gt;&#xA;&lt;p&gt;In a &lt;a href=&#34;https://yourbasic.org/algorithms/time-complexity-arrays/&#34;&gt;dynamic array&lt;/a&gt;,&#xA;elements are stored at the start of an underlying fixed array,&#xA;and the remaining positions are unused.&lt;/p&gt;</description>
    </item>
    <item>
      <title>API design: principles and best practices</title>
      <link>https://yourbasic.org/algorithms/your-basic-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/your-basic-api/</guid>
      <description>&lt;div style=&#34;margin-top:1em;&#34;&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/go.jpg&#34; alt=&#34;Finger pushing a go button&#34;&gt;&lt;/div&gt;&#xA;&lt;!-- CC0: https://pixabay.com/en/hand-finger-button-switch-start-944307/ --&gt;&#xA;&lt;ul class=&#34;toc&#34; style=&#34;font-weight: bold;&#34;&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#the-5-commandments&#34;&gt;The 5 Commandments&lt;/a&gt;&#xA;    &lt;ul style=&#34;list-style: none; font-weight: normal; margin-top: 0.2em;&#34;&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#1-tell-me-what-this-thing-is&#34;&gt;1. Tell me what this thing is&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#2-tell-me-what-it-does&#34;&gt;2. Tell me what it does&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#3-don-t-tell-me-how-it-works&#34;&gt;3. Don&#39;t tell me how it works&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#4-grant-me-the-right-to-use-it&#34;&gt;4. Grant me the right to use it&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#5-don-t-change-it&#34;&gt;5.  Don&#39;t change it&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#keep-it-simple&#34;&gt;Keep it simple&lt;/a&gt;&#xA;    &lt;ul style=&#34;list-style: none; font-weight: normal; margin-top: 0.2em;&#34;&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#don-t-use-complicated-constructs-where-simple-ones-will-do&#34;&gt;Don&#39;t use complicated constructs where simple ones will do&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#don-t-use-a-lot-where-a-little-will-do&#34;&gt;Don&#39;t use a lot where a little will do&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#one-package-one-idea&#34;&gt;One package, one idea&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#just-say-no&#34;&gt;Just say no&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#math-is-simple&#34;&gt;Math is simple&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#give-it-time&#34;&gt;Give it time&lt;/a&gt;&#xA;    &lt;ul style=&#34;list-style: none; font-weight: normal; margin-top: 0.2em;&#34;&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#eat-your-own-dog-food&#34;&gt;Eat your own dog food&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#show-don-t-tell&#34;&gt;Show, don&#39;t tell&lt;/a&gt;&#xA;    &lt;ul style=&#34;list-style: none; font-weight: normal; margin-top: 0.2em;&#34;&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#create-tutorials&#34;&gt;Create tutorials&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#use-examples&#34;&gt;Use examples&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#tools-of-the-trade&#34;&gt;Tools of the trade&lt;/a&gt;&#xA;    &lt;ul style=&#34;list-style: none; font-weight: normal; margin-top: 0.2em;&#34;&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#keep-it-consistent&#34;&gt;Keep it consistent&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#write-functions-that-need-little-and-give-much&#34;&gt;Write functions that need little and give much&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#discover-a-well-fitting-interface&#34;&gt;Discover a well-fitting interface&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#make-it-generic&#34;&gt;Make it generic&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#names-keep-them-short-and-sweet&#34;&gt;Names, keep them short and sweet&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;The aim of this text is to explore API design and try to find&#xA;strategies and rules that can help us create code libraries&#xA;that are safe, effective and easy to use.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Big O notation: definition and examples</title>
      <link>https://yourbasic.org/algorithms/big-o-notation-explained/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/big-o-notation-explained/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;Big O notation is a convenient way to describe how fast a function is&amp;nbsp;growing.&lt;/p&gt;&#xA;&lt;!-- CC BY 2.0: https://commons.wikimedia.org/wiki/File:Ocean_City_Ferris_Wheel.jpg --&gt;&#xA;&lt;div&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/big-o.jpg&#34;&gt;&lt;/div&gt;&#xA;&lt;div style=&#34;margin-top: 1em;&#34;&gt;&#xA;&lt;div style=&#34;float: left; min-width: 30%; margin-right: 2em;&#34;&gt;&#xA;  &lt;ul class=&#34;toc&#34; style=&#34;margin: 0;&#34;&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#definition&#34;&gt;Definition&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#constant-time&#34;&gt;Constant time&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#linear-time&#34;&gt;Linear time&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#quadratic-time&#34;&gt;Quadratic time&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div style=&#34;float: left;&#34;&gt;&#xA;  &lt;ul class=&#34;toc&#34; style=&#34;margin: 0;&#34;&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#sloppy-notation&#34;&gt;Sloppy notation&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#omega-and-theta-notation&#34;&gt;Ω and Θ notation&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#key-takeaways&#34;&gt;Key takeaways&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div style=&#34;clear: both&#34;&gt;&lt;/div&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;When we compute the &lt;a href=&#34;https://yourbasic.org/algorithms/time-complexity-explained/&#34;&gt;time complexity&lt;/a&gt; T(&lt;i&gt;n&lt;/i&gt;)&#xA;of an algorithm we rarely get an exact result, just an estimate. That&amp;rsquo;s fine, in computer science we are typically&#xA;only interested in how fast T(&lt;i&gt;n&lt;/i&gt;) is growing as a function of the input size &lt;i&gt;n&lt;/i&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Binary search trees explained</title>
      <link>https://yourbasic.org/algorithms/binary-search-tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/binary-search-tree/</guid>
      <description>&lt;div&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/tree.png&#34; class=&#34;extra-content&#34; style=&#34;float:right; margin:10px 60px 0 0;&#34;&gt;&lt;/div&gt;&#xA;&lt;ul class=&#34;toc&#34;&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#binary-tree-definitions&#34;&gt;Binary tree definitions&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#binary-search-tree&#34;&gt;Binary search tree&lt;/a&gt;&#xA;    &lt;ul style=&#34;list-style: none; font-weight: normal; margin-top: 0.2em;&#34;&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#balanced-trees-with-o-log-n-time-complexity&#34;&gt;Balanced trees with O(log n) time complexity&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#tree-algorithms&#34;&gt;Tree algorithms&lt;/a&gt;&#xA;    &lt;ul style=&#34;list-style: none; font-weight: normal; margin-top: 0.2em;&#34;&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#inorder-traversal&#34;&gt;Inorder traversal&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#search&#34;&gt;Search&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#insert&#34;&gt;Insert&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;binary-tree-definitions&#34;&gt;Binary tree definitions&lt;/h2&gt;&#xA;&lt;p&gt;A &lt;b&gt;binary tree&lt;/b&gt; is a data structure most easily described by recursion.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;A &lt;b&gt;binary tree&lt;/b&gt;&#xA;&lt;ul style=&#34;margin:0.5em 0;&#34;&gt;&#xA;&lt;li&gt; is either empty,&lt;/li&gt;&#xA;&lt;li&gt; or consists of a &lt;b&gt;node&lt;/b&gt;&#xA;  (also known as the &lt;b&gt;root&lt;/b&gt; of the tree) and two subtrees,&#xA;  the left and right subtree, which are also binary trees.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;A node with two empty subtrees is called a &lt;b&gt;leaf&lt;/b&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blackjack card counting risk analysis: poor gains at huge risk</title>
      <link>https://yourbasic.org/algorithms/blackjack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/blackjack/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;It’s possible to win at blackjack by counting cards, but most&amp;nbsp;fail.&#xA;The mean is positive, but the variance is&amp;nbsp;mean.&lt;/p&gt;&#xA;&lt;div&gt;&lt;img src=&#34;https://yourbasic.org/res/cardsharps.jpg&#34; alt=&#34;Cardsharps, Caravaggio c. 1594.&#34;&gt;&lt;/div&gt;&#xA;&lt;h2&gt;Always optimal strategy&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  Always use an optimal strategy adapted to the rules of your casino.&#xA;  Here is an example&#xA;  &lt;a href=&#34;http://en.wikipedia.org/wiki/Blackjack#Blackjack_strategy&#34;&gt;blackjack strategy&lt;/a&gt;.&#xA;  Every time you deviate from the optimal strategy –&#xA;  because of hunches or fear – it depletes your funds.&#xA;&lt;/p&gt;&#xA;&lt;h2&gt;Count cards&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  If you find a casino with good rules, and if you play&#xA;  with an optimal strategy, the odds are still against you –&#xA;  but the house edge can sometimes be as low&#xA;  as&amp;nbsp;&lt;span style=&#34;font-size:90%&#34;&gt;0.5%&lt;/span&gt;.&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bloom filters explained</title>
      <link>https://yourbasic.org/algorithms/bloom-filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/bloom-filter/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;A Bloom filter is a prob&amp;shy;abi&amp;shy;listic data struc&amp;shy;ture used to test set&amp;nbsp;member&amp;shy;ship.&lt;/p&gt;&#xA;&lt;!-- CC BY-SA 2.0:  https://commons.wikimedia.org/wiki/File:Neutral_density_filter_demonstration.jpg --&gt;&#xA;&lt;div&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/neutral-density-filter-demonstration.jpg&#34; alt=&#34;Neutral density filter demonstration&#34;&gt;&lt;/div&gt;&#xA;&lt;ul class=&#34;toc&#34;&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#bloom-filter-basics&#34;&gt;Bloom filter basics&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#example-blocking-shady-websites&#34;&gt;Example: Blocking shady websites&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#implementation&#34;&gt;Implementation&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bloom-filter-basics&#34;&gt;Bloom filter basics&lt;/h2&gt;&#xA;&lt;p&gt;The Bloom filter data structure tells whether an element &lt;strong&gt;may be&lt;/strong&gt; in a set, or &lt;strong&gt;definitely isn&amp;rsquo;t&lt;/strong&gt;.&#xA;The only possible errors are &lt;strong&gt;false positives&lt;/strong&gt;: a search for a nonexistent element&#xA;can give an incorrect answer.&#xA;With more elements in the filter, the error rate increases.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dynamic programming [step-by-step example]</title>
      <link>https://yourbasic.org/algorithms/dynamic-programming-explained/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/dynamic-programming-explained/</guid>
      <description>&lt;!-- CC BY-SA 2.0:  https://www.flickr.com/photos/gadl/604512604 --&gt;&#xA;&lt;div style=&#34;margin-top:1em;&#34;&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/recursive-photography.jpg&#34;&gt;&lt;/div&gt;&#xA;&lt;ul class=&#34;toc&#34;&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#problem&#34;&gt;Problem&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#recursive-algorithm&#34;&gt;Recursive algorithm&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#dynamic-programming-with-memoization&#34;&gt;Dynamic programming with memoization&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#dynamic-programming-with-tabulation&#34;&gt;Dynamic programming with tabulation&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#memoization-vs-tabulation&#34;&gt;Memoization vs. tabulation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This text contains a detailed example showing how to solve&#xA;a tricky problem efficiently with recursion and&#xA;dynamic programming – either with memoization or tabulation.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A &lt;strong&gt;dynamic programming algorithm&lt;/strong&gt; solves a complex problem by dividing it into simpler subproblems,&#xA;solving each of those just once, and storing their solutions.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Memoization&lt;/strong&gt;  is an optimization technique used to speed up programs by storing&#xA;the results of expensive function calls and returning the cached result when&#xA;the same inputs occur again.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Tabulation&lt;/strong&gt; is an approach where you solve a dynamic programming problem&#xA;by first filling up a table, and then compute the solution to the original problem&#xA;based on the results in this table.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;&#xA;&lt;p&gt;You&amp;rsquo;ve just got a tube of delicious chocolates and plan to eat one piece a day –&#xA;either by picking the one on the left or the right.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hash tables explained [step-by-step example]</title>
      <link>https://yourbasic.org/algorithms/hash-tables-explained/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/hash-tables-explained/</guid>
      <description>&lt;!-- Creative commons: http://www.flickr.com/photos/60in3/3059088647/ (missing) --&gt;&#xA;&lt;div style=&#34;margin-top:1em;&#34;&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/file-cabinet.jpg&#34; alt=&#34;file cabinet&#34;&gt;&lt;/div&gt;&#xA;&lt;ul class=&#34;toc&#34;&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#basics&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#hashing-with-chaining-simplified-example&#34;&gt;Hashing with chaining (simplified example)&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#realistic-hash-function-example&#34;&gt;Realistic hash function example&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#resizing-in-constant-amortized-time&#34;&gt;Resizing in constant amortized time&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;&#xA;&lt;p&gt;Hash tables are used to implement map and set data structures in most common programming languages.&#xA;In C++ and Java they are part of the standard libraries, while Python and Go have builtin dictionaries and maps.&lt;/p&gt;&#xA;&lt;p&gt;A hash table is an &lt;b&gt;unordered&lt;/b&gt; collection of &lt;b&gt;key-value&lt;/b&gt; pairs, where each key is &lt;b&gt;unique&lt;/b&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to analyze time complexity: Count your steps</title>
      <link>https://yourbasic.org/algorithms/time-complexity-explained/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/time-complexity-explained/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;Time complexity esti&amp;shy;mates the time to run an algo&amp;shy;rithm.&#xA;It&#39;s calcu&amp;shy;lated by counting elemen&amp;shy;tary opera&amp;shy;tions.&#xA;&lt;/p&gt;&#xA;&lt;!-- CC0: https://pixabay.com/en/slide-rule-count-math-mathematics-317759/ --&gt;&#xA;&lt;div&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/abacus.jpg&#34;&gt;&lt;/div&gt;&#xA;&lt;ul class=&#34;toc&#34;&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#example-iterative-algorithm&#34;&gt;Example (iterative algorithm)&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#worst-case-time-complexity&#34;&gt;Worst-case time complexity&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#average-case-time-complexity&#34;&gt;Average-case time complexity&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#quadratic-time-complexity&#34;&gt;Quadratic time complexity&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;example-iterative-algorithm&#34;&gt;Example (iterative algorithm)&lt;/h2&gt;&#xA;&lt;p&gt;What&amp;rsquo;s the running time of the following algorithm?&lt;/p&gt;&#xA;&lt;pre&gt;&#xA;// Compute the maximum element in the array a.&#xA;&lt;b&gt;Algorithm&lt;/b&gt; max(a):&#xA;&#x9;max ← a[0]&#xA;&#x9;&lt;b&gt;for&lt;/b&gt; i = 1 &lt;b&gt;to&lt;/b&gt; len(a)-1&#xA;&#x9;&#x9;&lt;b&gt;if&lt;/b&gt; a[i] &amp;gt; max&#xA;&#x9;&#x9;&#x9;max ← a[i]&#xA;&#x9;&lt;b&gt;return&lt;/b&gt; max&#xA;&lt;/pre&gt;&#xA;&lt;p&gt;The answer depends on factors such as input, programming language and runtime,&#xA;coding skill, compiler, operating system, and hardware.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to avoid initializing memory [in theory]</title>
      <link>https://yourbasic.org/algorithms/avoid-initializing-memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/avoid-initializing-memory/</guid>
      <description>&lt;!-- CC BY 2.0: https://www.flickr.com/photos/blakespot/6173837649 --&gt;&#xA;&lt;div style=&#34;margin-top:1em;&#34;&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/ram.jpg&#34; alt=&#34;A pile of RAM memory&#34;&gt;&lt;/div&gt;&#xA;&lt;p&gt;Consider an algorithm that uses a large memory area.&#xA;If the running time of the algorithm is smaller than the size of the memory,&#xA;initializing the memory will take longer than running the algorithm.&#xA;However, using a shrewd trick,&#xA;it’s possible to refrain from initializing the memory.&lt;/p&gt;&#xA;&lt;p&gt;This mysterious trick is used quite frequently in research articles,&#xA;often without explanation and a reference to Exercise 2.12 in&#xA;&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=578775&#34;&gt;The Design and Analysis of Computer Algorithms&lt;/a&gt;&#xA;by Aho, Hopcroft, and Ullman, 1974.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Insertion sort vs. selection sort (time complexity and performance)</title>
      <link>https://yourbasic.org/algorithms/insertion-sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/insertion-sort/</guid>
      <description>&lt;!-- CC0: http://www.publicdomainpictures.net/view-image.php?image=96282&amp;picture=playing-cards --&gt;&#xA;&lt;div style=&#34;margin-top:1em;&#34;&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/sort-playing-cards.jpg&#34;&gt;&lt;/div&gt;&#xA;&lt;h2 id=&#34;insertion-sort&#34;&gt;Insertion sort&lt;/h2&gt;&#xA;&lt;p&gt;Insertion sort is a simple sorting algorithm with &lt;strong&gt;quadratic&lt;/strong&gt; worst-case &lt;a href=&#34;https://yourbasic.org/algorithms/time-complexity-explained/&#34;&gt;time complexity&lt;/a&gt;,&#xA;but in some cases it&amp;rsquo;s still the algorithm of choice.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;It&amp;rsquo;s efficient for &lt;strong&gt;small data sets&lt;/strong&gt;.&#xA;It typically outperforms other simple quadratic algorithms,&#xA;such as selection sort or bubble sort.&lt;/li&gt;&#xA;&lt;li&gt;It&amp;rsquo;s &lt;strong&gt;adaptive&lt;/strong&gt;: it sorts data sets that are already substantially sorted efficiently.&#xA;The time complexity is O(&lt;i&gt;nk&lt;/i&gt;) when each element is at most &lt;i&gt;k&lt;/i&gt; places&#xA;away from its sorted position.&lt;/li&gt;&#xA;&lt;li&gt;It&amp;rsquo;s &lt;strong&gt;stable&lt;/strong&gt;: it doesn&amp;rsquo;t change the order of elements with equal keys.&lt;/li&gt;&#xA;&lt;li&gt;It&amp;rsquo;s &lt;strong&gt;in-place&lt;/strong&gt;: it only requires a constant amount of additional memory.&lt;/li&gt;&#xA;&lt;li&gt;It has &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=1370599&#34;&gt;good branch prediction characteristics&lt;/a&gt;,&#xA;typically limited to a single misprediction per key.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code&gt;// InsertionSort sorts the elements of a in ascending order.&#xA;func InsertionSort(a []int) {&#xA;&#x9;for j := 1; j &lt; len(a); j++ {&#xA;&#x9;&#x9;&lt;span class=&#34;comment&#34;&gt;// Invariant: a[:j] contains the same elements as&lt;/span&gt;&#xA;&#x9;&#x9;&lt;span class=&#34;comment&#34;&gt;// the original slice a[:j], but in sorted order.&lt;/span&gt;&#xA;&#x9;&#x9;key := a[j]&#xA;&#x9;&#x9;i := j - 1&#xA;&#x9;&#x9;for i &gt;= 0 &amp;&amp; a[i] &gt; key {&#xA;&#x9;&#x9;&#x9;a[i+1] = a[i]&#xA;&#x9;&#x9;&#x9;i--&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;a[i+1] = key&#xA;&#x9;}&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;selection-sort&#34;&gt;Selection sort&lt;/h2&gt;&#xA;&lt;p&gt;In practice, selection sort generally performs worse than insertion sort.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to graph algorithms: definitions and examples</title>
      <link>https://yourbasic.org/algorithms/graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/graph/</guid>
      <description>&lt;!-- CC BY-SA 3.0: https://commons.wikimedia.org/wiki/File:Social_Network_Analysis_Visualization.png --&gt;&#xA;&lt;div style=&#34;margin-top:1em;&#34;&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/social-graph.png&#34;&gt;&lt;/div&gt;&#xA;&lt;div style=&#34;margin-top:1em;&#34;&gt;&#xA;&lt;div style=&#34;float: left; min-width: 35%; margin-right: 2em;&#34;&gt;&#xA;&lt;ul class=&#34;toc&#34; style=&#34;font-weight: bold; margin:0;&#34;&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#terminology&#34;&gt;Definitions&lt;/a&gt;&#xA;    &lt;ul style=&#34;list-style: none; font-weight: normal; margin-top: 0.2em;&#34;&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#trees&#34;&gt;Trees&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#directed-graphs&#34;&gt;Directed graphs&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#data-structures&#34;&gt;Data structures&lt;/a&gt;&#xA;    &lt;ul style=&#34;list-style: none; font-weight: normal; margin-top: 0.2em;&#34;&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#adjacency-matrix&#34;&gt;Adjacency matrix&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#adjacency-list&#34;&gt;Adjacency list&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div style=&#34;float: left;&#34;&gt;&#xA;&lt;ul class=&#34;toc&#34; style=&#34;font-weight: bold; margin:0;&#34;&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#search-algorithms&#34;&gt;Search algorithms&lt;/a&gt;&#xA;    &lt;ul style=&#34;list-style: none; font-weight: normal; margin-top: 0.2em;&#34;&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#depth-first-search&#34;&gt;Depth-first search (DFS)&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#breadth-first-search&#34;&gt;Breadth-first search (BFS)&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#dijkstra-s-algorithm&#34;&gt;Dijkstra’s algorithm&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div style=&#34;clear: both&#34;&gt;&lt;/div&gt;&#xA;&lt;p&gt;This text introduces basic graph terminology,&#xA;standard graph data structures, and three fundamental&#xA;algorithms for traversing a graph in a systematic way.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Las Vegas vs. Monte Carlo algorithms</title>
      <link>https://yourbasic.org/algorithms/las-vegas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/las-vegas/</guid>
      <description>&lt;!-- Public domain: https://en.wikipedia.org/wiki/File:Hubert_Pearce_with_J._B._Rhine.png --&gt;&#xA;&lt;div style=&#34;margin-top:1em;&#34;&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/zener-cards.png&#34;&gt;&lt;/div&gt;&#xA;&lt;div&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Zener_cards&#34;&gt;Zener cards&lt;/a&gt;&lt;/div&gt;&#xA;&lt;p&gt;A &lt;strong&gt;Las Vegas&lt;/strong&gt; algorithm is a randomized algorithm&#xA;that always gives the correct result but gambles with resources.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Monte Carlo&lt;/strong&gt; simulations are a broad class of algorithms&#xA;that use repeated random sampling to obtain numerical results.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Monte Carlo &lt;b&gt;simulations&lt;/b&gt; are typically used to simulate the behaviour of other systems.&lt;/li&gt;&#xA;&lt;li&gt;Monte Carlo &lt;b&gt;algorithms&lt;/b&gt;, on the other hand,&#xA;are randomized algorithms whose output may be incorrect&#xA;with a certain, typically small, probability.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;random-point-in-circle-lasvegas&#34;&gt;Random point in circle (Las Vegas)&lt;/h2&gt;&#xA;&lt;div&gt;&lt;img style=&#34;float:right; margin-left:1em;&#34; src=&#34;https://yourbasic.org/algorithms/circle.png&#34;&gt;&lt;/div&gt;&#xA;&lt;p&gt;It&amp;rsquo;s easy and convenient to compute a random point in a circle with a Las Vegas algorithm.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Loop invariants can give you coding superpowers</title>
      <link>https://yourbasic.org/algorithms/loop-invariants-explained/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/loop-invariants-explained/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;An invariant is a state&amp;shy;ment about program vari&amp;shy;ables that&#xA;is true every time the execu&amp;shy;tion of the program reaches the&amp;nbsp;invariant.&lt;/p&gt;&#xA;&lt;!-- CC BY 2.0: https://www.flickr.com/photos/hulagway/5315234736 --&gt;&#xA;&lt;div&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/vanishing-point.jpg&#34; alt=&#34;Repeating circular patterns&#34;&gt;&lt;/div&gt;&#xA;&lt;ul class=&#34;toc&#34;&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#loop-invariant-definition&#34;&gt;Loop invariant definition (basic example)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#designing-with-invariants&#34;&gt;Designing with invariants&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#sorting&#34;&gt;Sorting (trickier example)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#3-way-partition&#34;&gt;3-way partition (advanced example)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;When struggling with a tricky 3-way partition algorithm as a student,&#xA;a friend suggested a well-fitting invariant.&#xA;It was like getting a secret superpower: suddenly I could write code&#xA;that used to be impossible.&lt;/p&gt;</description>
    </item>
    <item>
      <title>O(n log log n) time integer sorting</title>
      <link>https://yourbasic.org/algorithms/fastest-sorting-algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/fastest-sorting-algorithm/</guid>
      <description>&lt;!-- CC BY-NC 2.0: http://www.flickr.com/photos/davidsingleton/2175975083/ --&gt;&#xA;&lt;div style=&#34;margin-top:1em;&#34;&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/sorted.jpg&#34; alt=&#34;Programmer in a sea of balls&#34;&gt;&lt;/div&gt;&#xA;&lt;ul class=&#34;toc&#34;&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#the-fastest-sorting-algorithm&#34;&gt;The fastest sorting algorithm?&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#the-problem&#34;&gt;The problem&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#the-algorithm&#34;&gt;The algorithm&lt;/a&gt;&#xA;    &lt;ul style=&#34;list-style: none; font-weight: normal; margin-top: 0.2em;&#34;&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#reducing-number-size&#34;&gt;Reducing number size&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#fast-merging-of-short-numbers&#34;&gt;Fast merging of short numbers&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;the-fastest-sorting-algorithm&#34;&gt;The fastest sorting algorithm?&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;Which sorting algorithm is the fastest?&#xA;Ask this question to any group of programmers and you’ll get an animated discussion.&#xA;Of course, there is no one answer.&#xA;It depends not only on the algorithm, but also on the computer, data, and implementation.&#xA;However, if you count the number of operations needed to sort integer numbers&#xA;on a standard von Neumann computer, there is a clear winner –&#xA;the algorithm presented in the paper&#xA;“Sorting In Linear Time?” by A.&amp;nbsp;Andersson, T.&amp;nbsp;Hagerup, S.&amp;nbsp;Nilsson, and R.&amp;nbsp;Raman&#xA;(&lt;i&gt;Proceedings of the 27th Annual ACM Symposium on the Theory of Computing&lt;/i&gt;, 1995).&#xA;It sorts &lt;i&gt;n&lt;/i&gt; integers in time proportional to &lt;i&gt;n&lt;/i&gt;&amp;nbsp;log&amp;nbsp;log&amp;nbsp;&lt;i&gt;n&lt;/i&gt;.&#xA;In this article, I’ll give you a complete description of this algorithm.&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>On induction and recursive functions, with an application to binary search</title>
      <link>https://yourbasic.org/algorithms/induction-recursive-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/induction-recursive-functions/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;To make sense of recursive functions, you can use a way of thinking closely related to mathematical induction.&lt;/p&gt;&#xA;&lt;!-- CC BY-NC-SA 2.0: https://www.flickr.com/photos/gadl/254387060/ --&gt;&#xA;&lt;div&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/recursive-flower.jpg&#34; alt=&#34;Repeating circular patterns&#34;&gt;&lt;/div&gt;&#xA;&lt;ul class=&#34;toc&#34;&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#mathematical-induction&#34;&gt;Mathematical induction&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#sum-of-an-arithmetic-series&#34;&gt;Sum of an arithmetic series (basic example)&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#the-same-sum-in-code&#34;&gt;The same sum in code&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#binary-search-correctness-proof&#34;&gt;Binary search correctness proof&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;mathematical-induction&#34;&gt;Mathematical induction&lt;/h2&gt;&#xA;&lt;p&gt;Mathematical induction is a proof method often used to prove statements about integers.&lt;/p&gt;&#xA;&lt;p&gt;We&amp;rsquo;ll use the notation P(&lt;i&gt;n&lt;/i&gt;), where &lt;i&gt;n&lt;/i&gt; ≥ 0,&#xA;to denote such a statement.&#xA;To prove P(&lt;i&gt;n&lt;/i&gt;) with induction is a two-step procedure.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Radix sorting basics</title>
      <link>https://yourbasic.org/algorithms/radix-sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/radix-sort/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;Radix sorting is a simple and efficient sorting method that sometimes outperforms comparison-based algorithms.&lt;/p&gt;&#xA;&lt;!-- Public Domain Mark 1.0: https://picryl.com/media/sorting-mail --&gt;&#xA;&lt;div style=&#34;margin-top:1em;&#34;&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/sorting-mail.jpg&#34;&gt;&lt;/div&gt;&#xA;&lt;ul class=&#34;toc&#34;&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#bucket-sort&#34;&gt;Bucket sort&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#lsd-radix-sort&#34;&gt;LSD radix sort&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#msd-radix-sort&#34;&gt;MSD radix sort&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Radix sort is a non-comparative sorting algorithm for sorting numbers or strings. It distributes elements into buckets according to the digits of the numbers or the characters of the strings.&lt;/p&gt;&#xA;&lt;h2 id=&#34;bucket-sort&#34;&gt;Bucket sort&lt;/h2&gt;&#xA;&lt;p&gt;Bucket sort is the basic building block of most radix sorting schemes.&#xA;It solves the special case of sorting&#xA;&lt;i&gt;n&lt;/i&gt; integers drawn from a small set {0, 1, …, &lt;i&gt;m&lt;/i&gt;-1}.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Time complexity of array/list operations [Java, Python]</title>
      <link>https://yourbasic.org/algorithms/time-complexity-arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/time-complexity-arrays/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;To write fast code, you must know the difference between&#xA;constant and linear time array operations.&lt;/p&gt;&#xA;&lt;!-- CC0: https://www.pexels.com/photo/cars-high-speed-high-speed-photography-street-425277/ --&gt;&#xA;&lt;div&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/scooter-vs-taxi-640.jpeg&#34; alt=&#34;Scooter overtaking taxi at high speed&#34;&gt;&lt;/div&gt;&#xA;&lt;div style=&#34;margin-top:1em;&#34;&gt;&#xA;&lt;div style=&#34;float: left; min-width: 40%; margin-right: 2em;&#34;&gt;&#xA;&lt;ul class=&#34;toc&#34; style=&#34;font-weight: bold; margin:0;&#34;&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#array-basics&#34;&gt;Array basics&lt;/a&gt;&#xA;    &lt;ul style=&#34;list-style: none; font-weight: normal; margin-top: 0.2em;&#34;&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#dynamic-array&#34;&gt;Dynamic array&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#expensive-list-operations&#34;&gt;Expensive list operations&lt;/a&gt;&#xA;    &lt;ul style=&#34;list-style: none; font-weight: normal; margin-top: 0.2em;&#34;&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#expensive-java-arraylist-methods&#34;&gt;Java cheat sheet&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#expensive-python-list-operations&#34;&gt;Python cheat sheet&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div style=&#34;float: left;&#34;&gt;&#xA;&lt;ul class=&#34;toc&#34; style=&#34;font-weight: bold; margin:0;&#34;&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#alternatives&#34;&gt;Alternatives&lt;/a&gt;&#xA;    &lt;ul style=&#34;list-style: none; font-weight: normal; margin-top: 0.2em;&#34;&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#maps-and-dictionaries&#34;&gt;Maps and dictionaries&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#sorted-arrays&#34;&gt;Sorted arrays&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#linked-lists&#34;&gt;Linked lists&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;li&gt;&lt;a href=&#34;#binary-search-trees&#34;&gt;Binary search trees&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div style=&#34;clear: both&#34;&gt;&lt;/div&gt;&#xA;&lt;p&gt;Accidentally inefficient list code with&#xA;&lt;a href=&#34;https://yourbasic.org/algorithms/time-complexity-explained/#quadratic-time-complexity&#34;&gt;quadratic time complexity&lt;/a&gt;&#xA;is very common and can be hard to spot,&#xA;but when the list grows your code grinds to a halt.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Time complexity of recursive functions [Master theorem]</title>
      <link>https://yourbasic.org/algorithms/time-complexity-recursive-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/time-complexity-recursive-functions/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;It&#39;s often possible to compute the time complexity of a recursive function&#xA;by formulating and solving a recurrence relation.&lt;/p&gt;&#xA;&lt;!-- CC BY-SA 2.0: https://www.flickr.com/photos/gadl/337714905 --&gt;&#xA;&lt;div&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/recursive-soup.jpg&#34;&gt;&lt;/div&gt;&#xA;&lt;ul class=&#34;toc&#34;&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#recurrence-relation&#34;&gt;Recurrence relation (basic example)&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#binary-search&#34;&gt;Binary search&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#master-theorem&#34;&gt;Master theorem&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a href=&#34;#analysis-without-recurrence&#34;&gt;Analysis without recurrence&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This text contains a few examples and a formula, the “master theorem”,&#xA;which gives the solution to a class of recurrence relations that&#xA;often show up when analyzing recursive functions.&lt;/p&gt;&#xA;&lt;p&gt;We also show how to analyze recursive algorithms that depend on the size&#xA;and shape of a data structure.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Treaps: Randomized search trees</title>
      <link>https://yourbasic.org/algorithms/treap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/treap/</guid>
      <description>&lt;!-- CC0: https://pixabay.com/en/tree-trunk-abstract-brown-food-157673/ (missing) --&gt;&#xA;&lt;div&gt;&lt;img class=&#34;extra-content&#34; src=&#34;https://yourbasic.org/algorithms/search-tree.png&#34; alt=&#34;symbolic search tree&#34; style=&#34;float:right;margin:10px 0 10px 20px;&#34;&gt;&lt;/div&gt;&#xA;&lt;p class=&#34;lead&#34;&gt;A treap stores items in sorted order and offers effi&amp;shy;cient lookup, addi&amp;shy;tion and remo&amp;shy;val of items.&lt;/p&gt;&#xA;&lt;p&gt;If you could use only one data structure, which one would you choose?&#xA;A hash table? While it supports the basic lookup, addition and removal operations,&#xA;it doesn’t keep the elements sorted.&#xA;Therefore it can’t efficiently perform some common tasks,&#xA;such as finding the minimum element or producing an ordered list of all elements.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit cost vs. bit cost in time complexity</title>
      <link>https://yourbasic.org/algorithms/unit-cost-vs-bit-cost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/unit-cost-vs-bit-cost/</guid>
      <description>&lt;!-- CC BY 2.0: https://www.flickr.com/photos/illuminated_photography/3153988939 --&gt;&#xA;&lt;div style=&#34;margin-top:1em;&#34;&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/unit-cost-multiplication.jpg&#34; alt=&#34;Unit-cost multiplication devise.&#34;&gt;&lt;/div&gt;&#xA;&lt;div&gt;&lt;i&gt;Unit-cost multiplication&lt;/i&gt;&lt;/div&gt;&#xA;&lt;p&gt;Unit cost and bit cost are two different cost functions used to compute&#xA;space and time &lt;a href=&#34;https://yourbasic.org/algorithms/time-complexity-explained/&#34;&gt;complexity&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Unit cost&lt;/strong&gt; is used in a simplified model where a number,&#xA;of any size, fits within a memory cell, and where standard arithmetic operations&#xA;take constant time.&lt;/li&gt;&#xA;&lt;li&gt;With &lt;strong&gt;bit cost&lt;/strong&gt; we take into account that computations with bigger numbers&#xA;can be more expensive.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Unit cost often works well in practice as modern processors can perform&#xA;arithmetics on 64-bit integer and floating point numbers&#xA;in &lt;a href=&#34;https://yourbasic.org/algorithms/big-o-notation-explained/#constant-time&#34;&gt;constant time&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What’s a seed in a random number generator?</title>
      <link>https://yourbasic.org/algorithms/random-number-generator-seed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/random-number-generator-seed/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;In reality pseudo&amp;shy;random numbers aren&#39;t random at all.&#xA;They are computed using a fixed determi&amp;shy;nistic algorithm.&lt;/p&gt;&#xA;&lt;!-- CC BY-NC-SA 2.0: https://www.flickr.com/photos/rosswebsdale/2510946638/ --&gt;&#xA;&lt;div&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/dominoes.jpg&#34; alt=&#34;dominoes falling over&#34;&gt;&lt;/div&gt;&#xA;&lt;p&gt;The &lt;strong&gt;seed&lt;/strong&gt; is a starting point for a sequence of pseudorandom numbers.&#xA;If you start from the same seed, you get the very same sequence.&#xA;This can be quite useful for debugging.&lt;/p&gt;&#xA;&lt;p&gt;If you want a different sequence of numbers each time,&#xA;you can use the &lt;strong&gt;current time&lt;/strong&gt; as a seed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Your basic int: a most powerful data type</title>
      <link>https://yourbasic.org/algorithms/your-basic-int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yourbasic.org/algorithms/your-basic-int/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;The int data type is generic, effective, simple and efficient.&lt;/p&gt;&#xA;&lt;!-- CC0: https://pixabay.com/en/counting-fingers-first-hand-one-154152/ --&gt;&#xA;&lt;div&gt;&lt;img src=&#34;https://yourbasic.org/algorithms/counting.png&#34;&gt;&lt;/div&gt;&#xA;&lt;ul class=&#34;toc&#34;&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#generic-graph-data&#34;&gt;Generic graph data&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#effective-searching-and-sorting&#34;&gt;Effective searching and sorting&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#simple-sets&#34;&gt;Simple sets&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#efficient-filtering&#34;&gt;Efficient filtering&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Every kid can spot an integer number,&#xA;and every programmer is familiar with the &lt;code&gt;int&lt;/code&gt; data type.&#xA;Still we frequently forget how powerful an integer can be.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Generic&lt;/strong&gt;&lt;br&gt;&#xA;An &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;[]int&lt;/code&gt; is a bit pattern that can represent any digital data.&#xA;Furthermore, an &lt;code&gt;int&lt;/code&gt; can point into any type of &lt;a href=&#34;https://yourbasic.org/algorithms/time-complexity-arrays/&#34;&gt;array&lt;/a&gt;.&#xA;That&amp;rsquo;s as generic as it gets.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Effective&lt;/strong&gt;&lt;br&gt;&#xA;With an &lt;code&gt;int&lt;/code&gt; you have all of basic mathematics at your fingertips,&#xA;and boolean algebra, implemented with bit-level parallelism, to boot.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;&lt;br&gt;&#xA;Not really, but we&amp;rsquo;ve used arithmetic since childhood so it feels that way.&#xA;Familiarity breeds both simplicity and contempt.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Efficient&lt;/strong&gt;&lt;br&gt;&#xA;An &lt;code&gt;int&lt;/code&gt; fits inside a register sitting on the main datapath of the CPU,&#xA;and an &lt;code&gt;[]int&lt;/code&gt; is the main focus of hardware memory optimization.&#xA;It doesn&amp;rsquo;t get much faster or more efficient than that.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;&#xA;&lt;p&gt;This text comes with four Go example libraries:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
